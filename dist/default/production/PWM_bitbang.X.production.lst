

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Aug 08 21:37:28 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F630
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x5E,2
    17     0000                     
    18                           ; Generated 09/02/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F630 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0007                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000E                     	;# 
    63     000E                     	;# 
    64     000F                     	;# 
    65     0010                     	;# 
    66     0019                     	;# 
    67     0081                     	;# 
    68     0085                     	;# 
    69     0087                     	;# 
    70     008C                     	;# 
    71     008E                     	;# 
    72     0090                     	;# 
    73     0095                     	;# 
    74     0095                     	;# 
    75     0096                     	;# 
    76     0096                     	;# 
    77     0099                     	;# 
    78     009A                     	;# 
    79     009A                     	;# 
    80     009B                     	;# 
    81     009C                     	;# 
    82     009D                     	;# 
    83     0000                     	;# 
    84     0001                     	;# 
    85     0002                     	;# 
    86     0003                     	;# 
    87     0004                     	;# 
    88     0005                     	;# 
    89     0007                     	;# 
    90     000A                     	;# 
    91     000B                     	;# 
    92     000C                     	;# 
    93     000E                     	;# 
    94     000E                     	;# 
    95     000F                     	;# 
    96     0010                     	;# 
    97     0019                     	;# 
    98     0081                     	;# 
    99     0085                     	;# 
   100     0087                     	;# 
   101     008C                     	;# 
   102     008E                     	;# 
   103     0090                     	;# 
   104     0095                     	;# 
   105     0095                     	;# 
   106     0096                     	;# 
   107     0096                     	;# 
   108     0099                     	;# 
   109     009A                     	;# 
   110     009A                     	;# 
   111     009B                     	;# 
   112     009C                     	;# 
   113     009D                     	;# 
   114                           
   115                           	psect	nvBANK0
   116     0033                     __pnvBANK0:
   117     0033                     _th_h:
   118     0033                     	ds	1
   119     0005                     _PORTAbits	set	5
   120     0007                     _PORTCbits	set	7
   121     0001                     _TMR0	set	1
   122     000B                     _INTCONbits	set	11
   123     0096                     _IOCAbits	set	150
   124     0085                     _TRISAbits	set	133
   125     0081                     _OPTION_REGbits	set	129
   126     0087                     _TRISCbits	set	135
   127                           
   128                           	psect	cinit
   129     000C                     start_initialization:	
   130                           ; #config settings
   131                           
   132     000C                     __initialization:
   133                           
   134                           ; Clear objects allocated to BITBANK0
   135     000C  1283               	bcf	3,5	;RP0=0, select bank0
   136     000D  01B0               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   137                           
   138                           ; Clear objects allocated to BANK0
   139     000E  01B1               	clrf	__pbssBANK0& (0+127)
   140     000F  01B2               	clrf	(__pbssBANK0+1)& (0+127)
   141     0010                     end_of_initialization:	
   142                           ;End of C runtime variable initialization code
   143                           
   144     0010                     __end_of__initialization:
   145     0010  0183               	clrf	3
   146     0011  2859               	ljmp	_main	;jump to C main() function
   147                           
   148                           	psect	bitbssBANK0
   149     0180                     __pbitbssBANK0:
   150     0180                     _dir:
   151     0180                     	ds	1
   152     0181                     _enc_F:
   153     0181                     	ds	1
   154     0182                     _PWMState:
   155     0182                     	ds	1
   156                           
   157                           	psect	bssBANK0
   158     0031                     __pbssBANK0:
   159     0031                     _th_l:
   160     0031                     	ds	1
   161     0032                     _PWMCounter:
   162     0032                     	ds	1
   163                           
   164                           	psect	cstackCOMMON
   165     0000                     __pcstackCOMMON:
   166     0000                     ??_PWM_setup:
   167     0000                     ??_rotary_setup:	
   168                           ; 1 bytes @ 0x0
   169                           
   170                           
   171                           	psect	cstackBANK0
   172     0020                     __pcstackBANK0:	
   173                           ; 1 bytes @ 0x0
   174                           
   175     0020                     ?_PWM_setup:
   176     0020                     ?_rotary_setup:	
   177                           ; 1 bytes @ 0x0
   178                           
   179     0020                     ?_isr:	
   180                           ; 1 bytes @ 0x0
   181                           
   182     0020                     ??_isr:	
   183                           ; 1 bytes @ 0x0
   184                           
   185                           
   186                           ; 1 bytes @ 0x0
   187     0020                     	ds	4
   188     0024                     _isr$197:
   189                           
   190                           ; 2 bytes @ 0x4
   191     0024                     	ds	2
   192     0026                     ?_main:
   193     0026                     main@argc:	
   194                           ; 2 bytes @ 0x6
   195                           
   196                           
   197                           ; 2 bytes @ 0x6
   198     0026                     	ds	2
   199     0028                     main@argv:
   200                           
   201                           ; 2 bytes @ 0x8
   202     0028                     	ds	2
   203     002A                     ??_main:
   204                           
   205                           ; 1 bytes @ 0xA
   206     002A                     	ds	2
   207     002C                     _main$223:
   208                           
   209                           ; 2 bytes @ 0xC
   210     002C                     	ds	2
   211     002E                     _main$224:
   212                           
   213                           ; 2 bytes @ 0xE
   214     002E                     	ds	2
   215                           
   216                           	psect	maintext
   217     0059                     __pmaintext:	
   218 ;;
   219 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   220 ;;
   221 ;; *************** function _main *****************
   222 ;; Defined at:
   223 ;;		line 65 in file "PWM_bitbang.c"
   224 ;; Parameters:    Size  Location     Type
   225 ;;  argc            2    6[BANK0 ] int 
   226 ;;  argv            2    8[BANK0 ] PTR PTR unsigned char 
   227 ;; Auto vars:     Size  Location     Type
   228 ;;		None
   229 ;; Return value:  Size  Location     Type
   230 ;;                  2    6[BANK0 ] int 
   231 ;; Registers used:
   232 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   233 ;; Tracked objects:
   234 ;;		On entry : B00/0
   235 ;;		On exit  : 0/0
   236 ;;		Unchanged: 0/0
   237 ;; Data sizes:     COMMON   BANK0
   238 ;;      Params:         0       4
   239 ;;      Locals:         0       4
   240 ;;      Temps:          0       2
   241 ;;      Totals:         0      10
   242 ;;Total ram usage:       10 bytes
   243 ;; Hardware stack levels required when called: 2
   244 ;; This function calls:
   245 ;;		_PWM_setup
   246 ;;		_rotary_setup
   247 ;; This function is called by:
   248 ;;		Startup code after reset
   249 ;; This function uses a non-reentrant model
   250 ;;
   251                           
   252     0059                     _main:	
   253                           ;psect for function _main
   254                           
   255     0059                     l750:	
   256                           ;incstack = 0
   257                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   258                           
   259                           
   260                           ;PWM_bitbang.c: 66:     PWM_setup();
   261     0059  209A               	fcall	_PWM_setup
   262     005A                     l752:
   263                           
   264                           ;PWM_bitbang.c: 67:     rotary_setup();
   265     005A  20A4               	fcall	_rotary_setup
   266     005B                     l754:
   267                           
   268                           ;PWM_bitbang.c: 69:     enc_F = 0;
   269     005B  1283               	bcf	3,5	;RP0=0, select bank0
   270     005C  10B0               	bcf	_enc_F/(0+8),_enc_F& (0+7)	;volatile
   271                           
   272                           ;PWM_bitbang.c: 70:     th_h = 255;
   273     005D  30FF               	movlw	255
   274     005E  00B3               	movwf	_th_h
   275     005F                     l756:
   276                           
   277                           ;PWM_bitbang.c: 71:     th_l = 0;
   278     005F  01B1               	clrf	_th_l
   279     0060                     l758:
   280                           
   281                           ;PWM_bitbang.c: 73:     TRISCbits.TRISC3 = 0;
   282     0060  1683               	bsf	3,5	;RP0=1, select bank1
   283     0061  1187               	bcf	7,3	;volatile
   284     0062                     l760:
   285                           
   286                           ;PWM_bitbang.c: 74:     INTCONbits.GIE = 1;
   287     0062  178B               	bsf	11,7	;volatile
   288     0063                     l762:
   289                           
   290                           ;PWM_bitbang.c: 77:         if (enc_F){
   291     0063  1283               	bcf	3,5	;RP0=0, select bank0
   292     0064  1CB0               	btfss	_enc_F/(0+8),_enc_F& (0+7)	;volatile
   293     0065  2867               	goto	u221
   294     0066  2868               	goto	u220
   295     0067                     u221:
   296     0067  2863               	goto	l762
   297     0068                     u220:
   298     0068                     l764:
   299                           
   300                           ;PWM_bitbang.c: 78:             enc_F = 0;
   301     0068  10B0               	bcf	_enc_F/(0+8),_enc_F& (0+7)	;volatile
   302     0069                     l766:
   303                           
   304                           ;PWM_bitbang.c: 79:             th_l = th_l > 254 ? 254 : th_l;
   305     0069  0A31               	incf	_th_l,w
   306     006A  1903               	btfsc	3,2
   307     006B  286D               	goto	u231
   308     006C  286E               	goto	u230
   309     006D                     u231:
   310     006D  2876               	goto	l770
   311     006E                     u230:
   312     006E                     l768:
   313     006E  0831               	movf	_th_l,w
   314     006F  00AA               	movwf	??_main
   315     0070  01AB               	clrf	??_main+1
   316     0071  082A               	movf	??_main,w
   317     0072  00AC               	movwf	_main$223
   318     0073  082B               	movf	??_main+1,w
   319     0074  00AD               	movwf	_main$223+1
   320     0075  287A               	goto	l53
   321     0076                     l770:
   322     0076  30FE               	movlw	254
   323     0077  00AC               	movwf	_main$223
   324     0078  3000               	movlw	0
   325     0079  00AD               	movwf	_main$223+1
   326     007A                     l53:
   327     007A  082C               	movf	_main$223,w
   328     007B  00B1               	movwf	_th_l
   329     007C                     l772:
   330                           
   331                           ;PWM_bitbang.c: 80:             th_l = th_l < 1 ? 1 : th_l;
   332     007C  0831               	movf	_th_l,w
   333     007D  1903               	btfsc	3,2
   334     007E  2880               	goto	u241
   335     007F  2881               	goto	u240
   336     0080                     u241:
   337     0080  2889               	goto	l776
   338     0081                     u240:
   339     0081                     l774:
   340     0081  0831               	movf	_th_l,w
   341     0082  00AA               	movwf	??_main
   342     0083  01AB               	clrf	??_main+1
   343     0084  082A               	movf	??_main,w
   344     0085  00AE               	movwf	_main$224
   345     0086  082B               	movf	??_main+1,w
   346     0087  00AF               	movwf	_main$224+1
   347     0088  288D               	goto	l57
   348     0089                     l776:
   349     0089  3001               	movlw	1
   350     008A  00AE               	movwf	_main$224
   351     008B  3000               	movlw	0
   352     008C  00AF               	movwf	_main$224+1
   353     008D                     l57:
   354     008D  082E               	movf	_main$224,w
   355     008E  00B1               	movwf	_th_l
   356     008F                     l778:
   357                           
   358                           ;PWM_bitbang.c: 81:             th_l += dir*2-1;
   359     008F  3000               	movlw	0
   360     0090  1830               	btfsc	_dir/(0+8),_dir& (0+7)	;volatile
   361     0091  3002               	movlw	2
   362     0092  3EFF               	addlw	255
   363     0093  00DF               	movwf	btemp+1
   364     0094  085F               	movf	btemp+1,w
   365     0095  07B1               	addwf	_th_l,f
   366     0096                     l780:
   367                           
   368                           ;PWM_bitbang.c: 82:             th_h = 255-th_l;
   369     0096  0931               	comf	_th_l,w
   370     0097  00B3               	movwf	_th_h
   371     0098  2863               	goto	l762
   372     0099  280B               	ljmp	start
   373     009A                     __end_of_main:
   374                           
   375                           	psect	text1
   376     00A4                     __ptext1:	
   377 ;; *************** function _rotary_setup *****************
   378 ;; Defined at:
   379 ;;		line 107 in file "PWM_bitbang.c"
   380 ;; Parameters:    Size  Location     Type
   381 ;;		None
   382 ;; Auto vars:     Size  Location     Type
   383 ;;		None
   384 ;; Return value:  Size  Location     Type
   385 ;;                  1    wreg      void 
   386 ;; Registers used:
   387 ;;		None
   388 ;; Tracked objects:
   389 ;;		On entry : 0/0
   390 ;;		On exit  : 0/0
   391 ;;		Unchanged: 0/0
   392 ;; Data sizes:     COMMON   BANK0
   393 ;;      Params:         0       0
   394 ;;      Locals:         0       0
   395 ;;      Temps:          0       0
   396 ;;      Totals:         0       0
   397 ;;Total ram usage:        0 bytes
   398 ;; Hardware stack levels used: 1
   399 ;; Hardware stack levels required when called: 1
   400 ;; This function calls:
   401 ;;		Nothing
   402 ;; This function is called by:
   403 ;;		_main
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407     00A4                     _rotary_setup:	
   408                           ;psect for function _rotary_setup
   409                           
   410     00A4                     l728:	
   411                           ;incstack = 0
   412                           ; Regs used in _rotary_setup: []
   413                           
   414                           
   415                           ;PWM_bitbang.c: 109:     TRISAbits.TRISA2 = 1;
   416     00A4  1683               	bsf	3,5	;RP0=1, select bank1
   417     00A5  1505               	bsf	5,2	;volatile
   418                           
   419                           ;PWM_bitbang.c: 110:     TRISCbits.TRISC0 = 1;
   420     00A6  1407               	bsf	7,0	;volatile
   421                           
   422                           ;PWM_bitbang.c: 111:     IOCAbits.IOCA2 = 1;
   423     00A7  1516               	bsf	22,2	;volatile
   424     00A8                     l66:
   425     00A8  0008               	return
   426     00A9                     __end_of_rotary_setup:
   427                           
   428                           	psect	text2
   429     009A                     __ptext2:	
   430 ;; *************** function _PWM_setup *****************
   431 ;; Defined at:
   432 ;;		line 97 in file "PWM_bitbang.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;		None
   435 ;; Auto vars:     Size  Location     Type
   436 ;;		None
   437 ;; Return value:  Size  Location     Type
   438 ;;                  1    wreg      void 
   439 ;; Registers used:
   440 ;;		wreg, status,2, status,0
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMMON   BANK0
   446 ;;      Params:         0       0
   447 ;;      Locals:         0       0
   448 ;;      Temps:          0       0
   449 ;;      Totals:         0       0
   450 ;;Total ram usage:        0 bytes
   451 ;; Hardware stack levels used: 1
   452 ;; Hardware stack levels required when called: 1
   453 ;; This function calls:
   454 ;;		Nothing
   455 ;; This function is called by:
   456 ;;		_main
   457 ;; This function uses a non-reentrant model
   458 ;;
   459                           
   460     009A                     _PWM_setup:	
   461                           ;psect for function _PWM_setup
   462                           
   463     009A                     l720:	
   464                           ;incstack = 0
   465                           ; Regs used in _PWM_setup: [wreg+status,2+status,0]
   466                           
   467                           
   468                           ;PWM_bitbang.c: 99:     OPTION_REGbits.T0CS = 0;
   469     009A  1683               	bsf	3,5	;RP0=1, select bank1
   470     009B  1281               	bcf	1,5	;volatile
   471                           
   472                           ;PWM_bitbang.c: 100:     OPTION_REGbits.PSA = 0;
   473     009C  1181               	bcf	1,3	;volatile
   474     009D                     l722:
   475                           
   476                           ;PWM_bitbang.c: 101:     OPTION_REGbits.PS = 0b010;
   477     009D  0801               	movf	1,w	;volatile
   478     009E  39F8               	andlw	-8
   479     009F  3802               	iorlw	2
   480     00A0  0081               	movwf	1	;volatile
   481     00A1                     l724:
   482                           
   483                           ;PWM_bitbang.c: 103:     INTCONbits.RAIE = 1;
   484     00A1  158B               	bsf	11,3	;volatile
   485     00A2                     l726:
   486                           
   487                           ;PWM_bitbang.c: 104:     INTCONbits.T0IE = 1;
   488     00A2  168B               	bsf	11,5	;volatile
   489     00A3                     l63:
   490     00A3  0008               	return
   491     00A4                     __end_of_PWM_setup:
   492                           
   493                           	psect	text3
   494     0012                     __ptext3:	
   495 ;; *************** function _isr *****************
   496 ;; Defined at:
   497 ;;		line 51 in file "PWM_bitbang.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;		None
   500 ;; Auto vars:     Size  Location     Type
   501 ;;		None
   502 ;; Return value:  Size  Location     Type
   503 ;;                  1    wreg      void 
   504 ;; Registers used:
   505 ;;		wreg, status,2
   506 ;; Tracked objects:
   507 ;;		On entry : 0/0
   508 ;;		On exit  : 0/0
   509 ;;		Unchanged: 0/0
   510 ;; Data sizes:     COMMON   BANK0
   511 ;;      Params:         0       0
   512 ;;      Locals:         0       2
   513 ;;      Temps:          0       4
   514 ;;      Totals:         0       6
   515 ;;Total ram usage:        6 bytes
   516 ;; Hardware stack levels used: 1
   517 ;; This function calls:
   518 ;;		Nothing
   519 ;; This function is called by:
   520 ;;		Interrupt level 1
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524     0012                     _isr:	
   525                           ;psect for function _isr
   526                           
   527     0012                     i1l730:
   528                           
   529                           ;PWM_bitbang.c: 52:     if (INTCONbits.T0IF){
   530     0012  1D0B               	btfss	11,2	;volatile
   531     0013  2815               	goto	u13_21
   532     0014  2816               	goto	u13_20
   533     0015                     u13_21:
   534     0015  2836               	goto	i1l744
   535     0016                     u13_20:
   536     0016                     i1l732:
   537                           
   538                           ;PWM_bitbang.c: 53:         INTCONbits.T0IF = 0;
   539     0016  110B               	bcf	11,2	;volatile
   540                           
   541                           ;PWM_bitbang.c: 54:         TMR0 = PWMState ? 255 - th_l : 255 - th_h;
   542     0017  1930               	btfsc	_PWMState/(0+8),_PWMState& (0+7)	;volatile
   543     0018  281A               	goto	u14_21
   544     0019  281B               	goto	u14_20
   545     001A                     u14_21:
   546     001A  2823               	goto	i1l736
   547     001B                     u14_20:
   548     001B                     i1l734:
   549     001B  0933               	comf	_th_h,w
   550     001C  00A0               	movwf	??_isr
   551     001D  01A1               	clrf	??_isr+1
   552     001E  0820               	movf	??_isr,w
   553     001F  00A4               	movwf	_isr$197
   554     0020  0821               	movf	??_isr+1,w
   555     0021  00A5               	movwf	_isr$197+1
   556     0022  282A               	goto	i1l738
   557     0023                     i1l736:
   558     0023  0931               	comf	_th_l,w
   559     0024  00A0               	movwf	??_isr
   560     0025  01A1               	clrf	??_isr+1
   561     0026  0820               	movf	??_isr,w
   562     0027  00A4               	movwf	_isr$197
   563     0028  0821               	movf	??_isr+1,w
   564     0029  00A5               	movwf	_isr$197+1
   565     002A                     i1l738:
   566     002A  0824               	movf	_isr$197,w
   567     002B  0081               	movwf	1	;volatile
   568     002C                     i1l740:
   569                           
   570                           ;PWM_bitbang.c: 55:         PWMState = PWMState^1;
   571     002C  3004               	movlw	(0+1) shl (_PWMState& (0+7))
   572     002D  06B0               	xorwf	_PWMState/(0+8),f
   573     002E                     i1l742:
   574                           
   575                           ;PWM_bitbang.c: 56:         PORTCbits.RC3 = PWMState;
   576     002E  1930               	btfsc	_PWMState/(0+8),_PWMState& (0+7)	;volatile
   577     002F  2831               	goto	u15_21
   578     0030  2834               	goto	u15_20
   579     0031                     u15_21:
   580     0031  1283               	bcf	3,5	;RP0=0, select bank0
   581     0032  1587               	bsf	7,3	;volatile
   582     0033  2836               	goto	u16_24
   583     0034                     u15_20:
   584     0034  1283               	bcf	3,5	;RP0=0, select bank0
   585     0035  1187               	bcf	7,3	;volatile
   586     0036                     u16_24:
   587     0036                     i1l744:
   588                           
   589                           ;PWM_bitbang.c: 58:     if (INTCONbits.RAIF){
   590     0036  1C0B               	btfss	11,0	;volatile
   591     0037  2839               	goto	u17_21
   592     0038  283A               	goto	u17_20
   593     0039                     u17_21:
   594     0039  2852               	goto	i1l43
   595     003A                     u17_20:
   596     003A                     i1l746:
   597                           
   598                           ;PWM_bitbang.c: 59:         INTCONbits.RAIF = 0;
   599     003A  100B               	bcf	11,0	;volatile
   600                           
   601                           ;PWM_bitbang.c: 60:         enc_F = 1;
   602     003B  14B0               	bsf	_enc_F/(0+8),_enc_F& (0+7)	;volatile
   603     003C                     i1l748:
   604                           
   605                           ;PWM_bitbang.c: 61:         dir = (PORTAbits.RA2 + PORTCbits.RC0)%2;
   606     003C  1807               	btfsc	7,0	;volatile
   607     003D  283F               	goto	u18_21
   608     003E  2841               	goto	u18_20
   609     003F                     u18_21:
   610     003F  3001               	movlw	1
   611     0040  2842               	goto	u18_22
   612     0041                     u18_20:
   613     0041  3000               	movlw	0
   614     0042                     u18_22:
   615     0042  00A0               	movwf	??_isr
   616     0043  1905               	btfsc	5,2	;volatile
   617     0044  2846               	goto	u19_21
   618     0045  2848               	goto	u19_20
   619     0046                     u19_21:
   620     0046  3001               	movlw	1
   621     0047  2849               	goto	u19_22
   622     0048                     u19_20:
   623     0048  3000               	movlw	0
   624     0049                     u19_22:
   625     0049  0620               	xorwf	??_isr,w
   626     004A  1D03               	skipz
   627     004B  284D               	goto	u20_21
   628     004C  2850               	goto	u20_20
   629     004D                     u20_21:
   630     004D  1283               	bcf	3,5	;RP0=0, select bank0
   631     004E  1430               	bsf	_dir/(0+8),_dir& (0+7)	;volatile
   632     004F  2852               	goto	u21_24
   633     0050                     u20_20:
   634     0050  1283               	bcf	3,5	;RP0=0, select bank0
   635     0051  1030               	bcf	_dir/(0+8),_dir& (0+7)	;volatile
   636     0052                     u21_24:
   637     0052                     i1l43:
   638     0052  0823               	movf	??_isr+3,w
   639     0053  008A               	movwf	10
   640     0054  0E22               	swapf	??_isr+2,w
   641     0055  0083               	movwf	3
   642     0056  0EDE               	swapf	btemp,f
   643     0057  0E5E               	swapf	btemp,w
   644     0058  0009               	retfie
   645     0059                     __end_of_isr:
   646     005E                     btemp	set	94	;btemp
   647     005E                     wtemp0	set	94
   648                           
   649                           	psect	intentry
   650     0004                     __pintentry:	
   651                           ;incstack = 0
   652                           ; Regs used in _isr: [wreg+status,2]
   653                           
   654     0004                     interrupt_function:
   655     005E                     saved_w	set	btemp
   656     0004  00DE               	movwf	btemp
   657     0005  0E03               	swapf	3,w
   658     0006  1283               	bcf	3,5	;RP0=0, select bank0
   659     0007  00A2               	movwf	??_isr+2
   660     0008  080A               	movf	10,w
   661     0009  00A3               	movwf	??_isr+3
   662     000A  2812               	ljmp	_isr
   663                           
   664                           	psect	config
   665                           
   666                           ;Config register CONFIG @ 0x2007
   667                           ;	Oscillator Selection bits
   668                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O function o
      +                          n RA5/OSC1/CLKIN
   669                           ;	Watchdog Timer Enable bit
   670                           ;	WDTE = OFF, WDT disabled
   671                           ;	Power-up Timer Enable bit
   672                           ;	PWRTE = OFF, PWRT disabled
   673                           ;	RA3/MCLR pin function select
   674                           ;	MCLRE = ON, RA3/MCLR pin function is MCLR
   675                           ;	Brown-out Detect Enable bit
   676                           ;	BOREN = OFF, BOD disabled
   677                           ;	Code Protection bit
   678                           ;	CP = OFF, Program Memory code protection is disabled
   679                           ;	Data Code Protection bit
   680                           ;	CPD = OFF, Data memory code protection is disabled
   681     2007                     	org	8199
   682     2007  3FB4               	dw	16308

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     16      20

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10     6      4      48
                                              6 BANK0     10     6      4
                          _PWM_setup
                       _rotary_setup
 ---------------------------------------------------------------------------------
 (1) _rotary_setup                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_setup                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  6     6      0      24
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM_setup
   _rotary_setup

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       1       3        1.6%
BANK0               3E     10      14       4       32.3%
ABS                  0      0      14       5        0.0%
DATA                 0      0      14       6        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Aug 08 21:37:28 2023

             _PWMCounter 0032                       l53 007A                       l63 00A3  
                     l57 008D                       l66 00A8                      l720 009A  
                    l722 009D                      l724 00A1                      l726 00A2  
                    l750 0059                      l728 00A4                      l760 0062  
                    l752 005A                      l770 0076                      l762 0063  
                    l754 005B                      l780 0096                      l772 007C  
                    l764 0068                      l756 005F                      l774 0081  
                    l766 0069                      l758 0060                      l776 0089  
                    l768 006E                      l778 008F                      u220 0068  
                    u221 0067                      u230 006E                      u231 006D  
                    u240 0081                      u241 0080                      _dir 0180  
                    _isr 0012             _rotary_setup 00A4                     ?_isr 0020  
                   i1l43 0052                     _TMR0 0001                     _main 0059  
                   _th_h 0033                     _th_l 0031                     btemp 005E  
                   start 000B                    ??_isr 0020                    ?_main 0026  
                  i1l730 0012                    i1l740 002C                    i1l732 0016  
                  i1l742 002E                    i1l734 001B                    i1l736 0023  
                  i1l744 0036                    i1l746 003A                    i1l738 002A  
                  i1l748 003C                    u20_20 0050                    u20_21 004D  
                  u13_20 0016                    u13_21 0015                    u21_24 0052  
                  u14_20 001B                    u14_21 001A                    u15_20 0034  
                  u15_21 0031                    u16_24 0036                    u17_20 003A  
                  u17_21 0039                    u18_20 0041                    u18_21 003F  
                  u18_22 0042                    u19_20 0048                    u19_21 0046  
                  u19_22 0049                    _enc_F 0181                    pclath 000A  
                  status 0003                    wtemp0 005E          __initialization 000C  
           __end_of_main 009A                   ??_main 002A                   saved_w 005E  
      __end_of_PWM_setup 00A4  __end_of__initialization 0010           __pcstackCOMMON 0000  
         _OPTION_REGbits 0081               __pbssBANK0 0031               __pmaintext 0059  
             __pintentry 0004                  _isr$197 0024                  __ptext1 00A4  
                __ptext2 009A                  __ptext3 0012     end_of_initialization 0010  
              _PORTAbits 0005                _PORTCbits 0007                _TRISAbits 0085  
              _TRISCbits 0087                _PWM_setup 009A            __pbitbssBANK0 0180  
    start_initialization 000C              __end_of_isr 0059            ?_rotary_setup 0020  
             ?_PWM_setup 0020                ___latbits 0000            __pcstackBANK0 0020  
         ??_rotary_setup 0000                __pnvBANK0 0033              ??_PWM_setup 0000  
      interrupt_function 0004                 _IOCAbits 0096                 _PWMState 0182  
   __end_of_rotary_setup 00A9                 _main$223 002C                 _main$224 002E  
               main@argc 0026                 main@argv 0028               _INTCONbits 000B  
               intlevel1 0000  
